<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="stealthmate.github.io/saidai-deep-learning/feed/linux.xml" rel="self" type="application/atom+xml" /><link href="stealthmate.github.io/saidai-deep-learning/" rel="alternate" type="text/html" /><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/feed/linux.xml</id><title type="html"> | Linux</title><entry><title type="html">Telegramの入れ方</title><link href="stealthmate.github.io/saidai-deep-learning/linux/telegram.html" rel="alternate" type="text/html" title="Telegramの入れ方" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/telegram</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/telegram.html">&lt;h2 id=&quot;事前準備&quot;&gt;事前準備&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;以下の手順で、ユーザーが&lt;code class=&quot;highlighter-rouge&quot;&gt;michael&lt;/code&gt;だと仮定し、ホームディレクトリを&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael&lt;/code&gt;とします。各自自分のユーザーネームに合わせてください。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;telegramをダウンロード&quot;&gt;Telegramをダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://desktop.telegram.org/&quot;&gt;ここ&lt;/a&gt;からTelegramをダウンロード（Linux 64-bit版）。以下の手順は&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael/Downloads/tsetup.1.8.15.tar.xz&lt;/code&gt;にダウンロードしたと仮定しますが、ファイル名が異なる場合は変えて適宜変更してください。&lt;/p&gt;

&lt;h2 id=&quot;telegramのファイルを決まった場所に置く&quot;&gt;Telegramのファイルを決まった場所に置く&lt;/h2&gt;

&lt;p&gt;Linuxでは、パッケージマネージャー（Mintは&lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;）以外の方法で取得したソフトは&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;に置くことが習慣です*。なので、Telegramもそこに置きましょう。
ただし、&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;はHOMEディレクトリの外にあるので、特別な権限が必要です。そのために&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;を使います。以下はダウンロードしてからの手順です。なお、#はコメントで、コマンドの動作には関係ありません。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /opt/Telegram                                                                          &lt;span class=&quot;c&quot;&gt;# ディレクトリを作る&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; /home/michael/Downloads/tsetup.1.8.15.tar.xz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /opt/Telegram &lt;span class=&quot;nt&quot;&gt;--strip-components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1  &lt;span class=&quot;c&quot;&gt;# .tar.xzというのは圧縮ファイルなので、/opt/Telegramで解凍します&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /opt/Telegram/Telegram /usr/bin/Telegram                                               &lt;span class=&quot;c&quot;&gt;# /usr/binはPATHに入っているので、/opt/Telegram/Telegramを指すリンクを/usr/binに置きます&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最後の1行に注目してください。&lt;code class=&quot;highlighter-rouge&quot;&gt;ln&lt;/code&gt;というプログラムはリンクを作るためのものです。リンクというのは、プログラムのように見せかけたものですが、実際はプログラムの場所を指しているだけです。大事なのは、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/Telegram&lt;/code&gt;というリンクを実行すると、結果は&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/Telegram/Telegram&lt;/code&gt;を実行したのと同じです。&lt;/p&gt;

&lt;div class=&quot;footnote&quot;&gt;
* ソースコードからビルドした物はまた別のところに置きます。
&lt;/div&gt;

&lt;h2 id=&quot;telegramをmenuで表示できるようにする&quot;&gt;TelegramをMenuで表示できるようにする&lt;/h2&gt;

&lt;p&gt;このままでもTerminalでTelegramを打てば使えますが、タスクバーのMenuに入れると起動しやすいですよね。&lt;/p&gt;

&lt;p&gt;そのために、まずアイコンが必要ですね。Telegramから落としたものに残念ながらアイコンが入っていなかったので、自分達で落とす必要があります。幸い、ネットにはアイコンがあったので、&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/OO565.png&quot; alt=&quot;telegram image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下のコマンドでネットから画像を落とすことができます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl https://i.stack.imgur.com/OO565.png &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /opt/Telegram/telegram128.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;というプログラムは、あるインターネットへのリンクから内容を落とします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TelegramをMenuで表示するためには、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/applications/&lt;/code&gt;で新しいファイルを作らなければなりません。書式の説明は省略しますが、以下の内容のファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael/telegram.desktop&lt;/code&gt;という場所と名前で作りましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Desktop Entry]
Name=Telegram
Exec=/usr/bin/Telegram -- %u
GenericName=Messenger
Comment=Message your friends
Type=Application
Terminal=false
StartupNotify=false
Icon=/opt/Telegram/telegram128.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでほぼ完成です。後はファイルを指定した場所に移動するだけなので、以下のコマンドで終わらせましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mv /home/michael/telegram.desktop /usr/share/applications/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MenuでTelegramを打って見ましょう！&lt;/p&gt;</content><author><name></name></author><summary type="html">事前準備</summary></entry><entry><title type="html">.profileと.bashrcの初期設定</title><link href="stealthmate.github.io/saidai-deep-learning/linux/profile.html" rel="alternate" type="text/html" title=".profileと.bashrcの初期設定" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/profile</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/profile.html">&lt;h2 id=&quot;必要な知識&quot;&gt;必要な知識&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;stealthmate.github.io/saidai-deep-learning/linux/environment_vars.html&quot;&gt;PATHとその他環境変数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;初期設定の意義&quot;&gt;初期設定の意義&lt;/h2&gt;

&lt;p&gt;以下は、一般的に良く使われるプロフィール設定で、このブログではほぼ前提として扱うので、入れてしておきましょう。なお、随時更新していく予定なので、定期的に確認してください。&lt;/p&gt;

&lt;h2 id=&quot;profileの設定&quot;&gt;.profileの設定&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.local/bin
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bashrcの設定&quot;&gt;.bashrcの設定&lt;/h2&gt;</content><author><name></name></author><summary type="html">必要な知識</summary></entry><entry><title type="html">日本語入力の設定</title><link href="stealthmate.github.io/saidai-deep-learning/linux/jp_input.html" rel="alternate" type="text/html" title="日本語入力の設定" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/jp_input</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/jp_input.html">&lt;h2 id=&quot;必要なパッケージをインストールする&quot;&gt;必要なパッケージをインストールする&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fcitx fcitx-mozc fcitx-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;言語パッケージをインストールする&quot;&gt;言語パッケージをインストールする&lt;/h2&gt;

&lt;p&gt;タスクバーのMenuから&lt;code class=&quot;highlighter-rouge&quot;&gt;Input Method -&amp;gt; Input Method -&amp;gt; Japanese -&amp;gt; Install&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;h2 id=&quot;ログアウトし再びログインする&quot;&gt;ログアウトし、再びログインする&lt;/h2&gt;

&lt;h2 id=&quot;mozcを設定する&quot;&gt;mozcを設定する&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;タスクバーのMenuから&lt;code class=&quot;highlighter-rouge&quot;&gt;Fcitx Configuration -&amp;gt; Input Method -&amp;gt; +&lt;/code&gt;をクリックする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Only Show Current Language&lt;/code&gt;を外す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mozc&lt;/code&gt;を探して、選択する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;日本語入力の使い方&quot;&gt;日本語入力の使い方&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL-Space&lt;/code&gt;で英語・日本語に切り替えができます。ひらがなで文字を打ち、スペースで変換できます。&lt;/p&gt;

&lt;h2 id=&quot;その他設定&quot;&gt;その他設定&lt;/h2&gt;

&lt;h3 id=&quot;全角半角キーで切り替える&quot;&gt;全角半角キーで切り替える&lt;/h3&gt;

&lt;p&gt;タスクバーMenuから、&lt;code class=&quot;highlighter-rouge&quot;&gt;Fcitx Configuration -&amp;gt; Global Config&lt;/code&gt;に行き、&lt;code class=&quot;highlighter-rouge&quot;&gt;Trigger Input Method&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL-Space&lt;/code&gt;をクリックし、全角半角キーを押す。&lt;/p&gt;</content><author><name></name></author><summary type="html">必要なパッケージをインストールする</summary></entry><entry><title type="html">Home</title><link href="stealthmate.github.io/saidai-deep-learning/linux/home.html" rel="alternate" type="text/html" title="Home" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/home</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/home.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">よくある質問</title><link href="stealthmate.github.io/saidai-deep-learning/linux/faq.html" rel="alternate" type="text/html" title="よくある質問" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/faq</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/faq.html">&lt;h2 id=&quot;linuxのインストールについて&quot;&gt;Linuxのインストールについて&lt;/h2&gt;

&lt;h3 id=&quot;linux入れるのに必要な準備はありますか&quot;&gt;Linux入れるのに必要な準備はありますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ソフトウェア以外、消されたら困るデータ（写真、資料、動画、音楽など）をどこか一箇所にまとめること。例えば、 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\my-data\&lt;/code&gt; 。心配な人はUSBにバックアップすると良い。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;生協のパソコン&lt;/strong&gt; を使っている人は、保証の詳細を確認すること。特に、OSのインストールで保証が無効になったりすることはあり得るので注意すること。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linuxとwindowsは併用できますか&quot;&gt;LinuxとWindowsは併用できますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;できます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linuxを入れた後windows上の動作が重くなることはありますか&quot;&gt;Linuxを入れた後、Windows上の動作が重くなることはありますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;基本的に重くなることはありません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linuxを入れるのにどれぐらい時間かかりますか&quot;&gt;Linuxを入れるのにどれぐらい時間かかりますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;準備が万端で、途中で問題が発生しなければ1時間程で終わります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linuxの使用について&quot;&gt;Linuxの使用について&lt;/h2&gt;

&lt;h3 id=&quot;linuxでwordexcelpowerpointは使えますか&quot;&gt;LinuxでWord、Excel、PowerPointは使えますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Word・Excel・PowerPointそのものではないが、LibreOfficeという互換可能なソフトがあるので、安心してください。高度な機能を使っている人は、LibreOfficeでその機能が存在するかどうかを調べると良い。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windowsで使っているソフトはlinuxで使えますか&quot;&gt;Windowsで使っているソフトはLinuxで使えますか？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;使えません。WindowsとLinuxは根本が違うので、Windowsで動くものは基本Linuxで動きません（反対も然り）。ただし、ソースコードがあるもの（pythonやJavaで書いたスクリプト、C/C++で書いたプログラム等）は、Linuxで動かすことができます。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linuxのインストールについて</summary></entry><entry><title type="html">PATHとその他環境変数</title><link href="stealthmate.github.io/saidai-deep-learning/linux/environment_vars.html" rel="alternate" type="text/html" title="PATHとその他環境変数" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/environment_vars</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/environment_vars.html">&lt;h2 id=&quot;環境変数とは&quot;&gt;環境変数とは&lt;/h2&gt;

&lt;p&gt;プログラムを実行するというのは、ある&lt;strong&gt;文脈&lt;/strong&gt;で行われることなので、その文脈をプログラムに知らせるために&lt;strong&gt;環境変数&lt;/strong&gt;があります。例えば、LinuxでTerminalを起動したときに、&lt;code class=&quot;highlighter-rouge&quot;&gt;michael@michael-pc&lt;/code&gt;という文字が出てくるのは、michaelというユーザーがTerminalを起動しているからです。つまり、「ユーザーがmichaelである」という文脈の中でTerminalが動いています。そして、「ユーザーがmichaelである」ということをTerminalに知らせるのは、&lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt;という環境変数です。&lt;/p&gt;

&lt;p&gt;Terminalで&lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt;というコマンドを打つと、そのTerminalに見えている全ての環境変数とその値が表示されます。そこで&lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt;変数を探してみてください。値はあなたのユーザーネームになっているはずです。他にも&lt;code class=&quot;highlighter-rouge&quot;&gt;HOME&lt;/code&gt;変数（現ユーザーのHOMEディレクトリの場所）や、&lt;code class=&quot;highlighter-rouge&quot;&gt;LANG&lt;/code&gt;変数（現ユーザーが設定しているシステム言語）などもぜひ確認してみてください。&lt;/p&gt;

&lt;h2 id=&quot;path変数&quot;&gt;PATH変数&lt;/h2&gt;

&lt;p&gt;Terminalで&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;など、様々なコマンドを実行できますよね。厳密に言えば、これらはコマンドではなくプログラムです*。つまり、パソコンのどこかに&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;というファイルがあり、そのファイルを実行すると、pythonのインタープリタが起動します。しかし、Terminalはどうやって&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;ファイルの居場所が分かるのでしょう？&lt;/p&gt;

&lt;p&gt;答えはPATH環境変数です。PATHの値はディレクトリのリストです。Terminalで&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;と打ったときに、shellはPATH変数のディレクトリを順番に見て、その中にpythonというファイルが存在すれば、それを実行します。&lt;/p&gt;

&lt;div class=&quot;footnote&quot;&gt;* コマンドはshell（Terminalでの入力を解釈しているもの）の中に組み込まれているものであり、プログラムはshellに関係なく存在するものである。例えば、lsはコマンドである（どこにlsというファイルが存在するわけではない）のに対し、pythonはプログラムである。&lt;/div&gt;

&lt;h2 id=&quot;環境変数の設定&quot;&gt;環境変数の設定&lt;/h2&gt;

&lt;p&gt;Linuxでは様々なところで環境変数が設定されます。その中で一番身近にあるのが.profileファイルと.bashrcファイルです。この二つのファイルで環境変数を設定したり、その他の設定等もできます。.profileも.bashrcも全く同じように書式で書くものですが、違いがあります。&lt;/p&gt;

&lt;p&gt;.profileは、システムにログインした時（電源を入れて起動したときや、SSHで接続した時など）だけに実行されます。つまり、最初にパソコンの電源を入れた時点で1回だけ実行され、そこで行った設定はその後で実行されたあらゆるプログラムで受け継げられます。&lt;/p&gt;

&lt;p&gt;一方で.bashrcは、Terminalを起動した時点で実行されます。つまり、パソコンの電源を入れてから、例えば10個のTerminalを起動したら、それぞれの中で.bashrcが実行されます。そして、そのTerminalの中では.bashrcで行った設定が適用されます。&lt;/p&gt;

&lt;h2 id=&quot;profileとbashrcの書き方&quot;&gt;.profileと.bashrcの書き方&lt;/h2&gt;

&lt;p&gt;.profileと.bashrcはshell scriptなので、shellの言語で書きます。ここでshellの言語について詳しくは説明しませんが、環境変数を設定したいときは以下のような書き方で書けます。&lt;/p&gt;

&lt;h3 id=&quot;環境変数を新しく作る&quot;&gt;環境変数を新しく作る&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MY_VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;MY_VARIABLE&lt;/code&gt;という変数に&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;という値が保存されます。&lt;/p&gt;

&lt;h3 id=&quot;環境変数に値をくっつける&quot;&gt;環境変数に値をくっつける&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/my/directory&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで、仮に&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;の値が&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael&lt;/code&gt;だった場合、新しくなった値は&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael:/my/directory&lt;/code&gt;になります。一般的に、&lt;code class=&quot;highlighter-rouge&quot;&gt;$VARIABLE&lt;/code&gt;と書くと、&lt;code class=&quot;highlighter-rouge&quot;&gt;VARIABLE&lt;/code&gt;の値を意味するので、どこに値をくっつけたいかによっては&lt;code class=&quot;highlighter-rouge&quot;&gt;export VARIABLE=&quot;value $VARIABLE&quot;&lt;/code&gt;や、&lt;code class=&quot;highlighter-rouge&quot;&gt;export VARIABLE=value1 $VARIABLE value2&lt;/code&gt;などの書き方ができます。&lt;/p&gt;

&lt;h3 id=&quot;環境変数を削除する&quot;&gt;環境変数を削除する&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;BAD_VARIABLE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;BAD_VARIABLE&lt;/code&gt;は文脈から消え、元々なかったのと同じです。&lt;/p&gt;

&lt;h2 id=&quot;path変数を設定するときの注意点&quot;&gt;PATH変数を設定するときの注意点&lt;/h2&gt;

&lt;p&gt;PATH変数の値を自分で更新する時は多くありますが、そこで気をつけなければいけないところが何個かあります。&lt;/p&gt;

&lt;h3 id=&quot;pathにディレクトリを追加する時後ろに追加すること&quot;&gt;PATHにディレクトリを追加する時、後ろに追加すること&lt;/h3&gt;

&lt;p&gt;shellがPATHでプログラムを探す時、左から順番に探して行きます。そして、最初にプログラムが見つかったディレクトリからプログラムを実行します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;という、現在の日付を表示するプログラムを実行したとします。もし、あなたがPATHの頭にディレクトリを追加していて、たまたまそこに&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;というプログラムがあり、それが全く違うことをするプログラムだったら、求めている結果と違いますよね。パソコンでは、自分から実行しなくても、裏にあるソフトが色々なプログラムを実行したりします。その場合も同じくPATHが参照されるので、そこでこのような齟齬が起きたら、パソコンの動作が正しくなくなります。&lt;/p&gt;

&lt;h3 id=&quot;pathの前の値を無視しないこと&quot;&gt;PATHの前の値を無視しないこと&lt;/h3&gt;

&lt;p&gt;PATHには予め様々なディレクトリが設定されています。それらはシステムが正しく動くためのものなので、PATHから無くなると、パソコンが動かなくなります。なので、PATHを変更する時は、常に前の値を維持したまま、&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=$PATH:something&lt;/code&gt;という形で後ろへの追加だけ行いましょう。&lt;/p&gt;</content><author><name></name></author><summary type="html">環境変数とは</summary></entry><entry><title type="html">Emacsの設定を変えてみる</title><link href="stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-02-init-el.html" rel="alternate" type="text/html" title="Emacsの設定を変えてみる" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-02-init-el</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-02-init-el.html">&lt;p&gt;&lt;a href=&quot;/saidai-deep-learning/linux/emacs-on-steroids-01-basics.html&quot;&gt;前回&lt;/a&gt;では、Emacsの中にElispのインタプリタがあり、ほとんどの動作はElispで書かれたスクリプトの実行結果だと述べました。また、ショートカットの書き方や特徴についても述べました。今回は実際にElispを書きながら、Emacsの動作を変えて、新しいショートカットを作ってみます。&lt;/p&gt;

&lt;h1 id=&quot;事前知識準備&quot;&gt;事前知識・準備&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/saidai-deep-learning/linux/emacs-on-steroids-01-basics.html&quot;&gt;Emacs基礎知識&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ユーザー名が&lt;code class=&quot;highlighter-rouge&quot;&gt;michael&lt;/code&gt;だと仮定する&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;emacsの設定ファイル&quot;&gt;Emacsの設定ファイル&lt;/h1&gt;

&lt;p&gt;Emacsが起動するとき、&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;というファイルをまず最初にload（ロード・実行）します。&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;は普段、&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.emacs.d/init.el&lt;/code&gt;にあります。もし存在しなければ、作っておきましょう。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.emacs.d/
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;init.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;の拡張子に注目しましょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;.el&lt;/code&gt;というのは予想通りElispから来ています。つまり、&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;はElispで書かれたスクリプトです。&lt;/p&gt;

&lt;h1 id=&quot;initelに書く内容&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;に書く内容&lt;/h1&gt;

&lt;p&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;に一体何を書けばいいでしょうか。簡単に言うと、命令を書きます。Pythonで&lt;code class=&quot;highlighter-rouge&quot;&gt;x = 3&lt;/code&gt;と各のと同じように、Elispでも変数を定義したり、値を変更したり、処理を呼び出したりできます。少し抽象的に言うと、Emacsの&lt;strong&gt;状態&lt;/strong&gt;を&lt;strong&gt;変更&lt;/strong&gt;させます。例えば、文字の色が変数&lt;code class=&quot;highlighter-rouge&quot;&gt;char-color&lt;/code&gt;に保存されているとしたら、その変数の値を&lt;code class=&quot;highlighter-rouge&quot;&gt;yellow&lt;/code&gt;に変えることでEmacsの状態を変え、次に画面を描くときにEmacsがその新しい状態を使って、黄色い文字を描いてくれます。&lt;/p&gt;

&lt;h2 id=&quot;行番号が常に表示されるように設定してみる&quot;&gt;行番号が常に表示されるように設定してみる&lt;/h2&gt;

&lt;p&gt;テキストエディターを使うとき、行番号が表示されると位置を把握しやすいですね。Emacsではデフォルトで行番号が表示されないので、表示されるようにしましょう。そのために、&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;で以下を書きます：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-display-line-numbers-mode&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;を保存して、Emacsを再起動してみてまた&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;を開いてみましょう。左側に行番号が表示されているはずです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;では、上記のコードについて少し解説をしておきましょう。&lt;/p&gt;

&lt;p&gt;まず、Elispでは全ての命令がカッコで囲まれます。なぜかと言うと、Elispのコードは全てリストから成るからです（豆知識：Lispという名前は&lt;strong&gt;Lis&lt;/strong&gt;t &lt;strong&gt;P&lt;/strong&gt;rocessor（列処理機）が由来です）。Elispで各リストはカッコで囲まれ、それぞれの要素をスペース区切りで書きます。なので、上のコードは2つの要素からなるリストで、それぞれ&lt;code class=&quot;highlighter-rouge&quot;&gt;global-display-line-numbers-mode&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;global-display-line-numbers-mode&lt;/code&gt;というのは、名前から分かると思いますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;で（どこでも）&lt;code class=&quot;highlighter-rouge&quot;&gt;line numbers&lt;/code&gt;（行番号）を&lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt;（表示）するモードです。一方&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;というのは&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;という値を表しています。つまり、&lt;code class=&quot;highlighter-rouge&quot;&gt;global-display-line-numbers-mode&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にすることで、常に行番号が見えるようになります。&lt;/p&gt;

&lt;p&gt;さてこれは変数の代入でしょうか。実は違います。変数の代入についてはまた次の節で解説しますが、上記の文は&lt;strong&gt;関数の呼び出し&lt;/strong&gt;です。Elispでは、リストの頭に来る要素は常に関数の名前です。したがって、上記の文は、&lt;code class=&quot;highlighter-rouge&quot;&gt;global-display-line-numbers-mode&lt;/code&gt;という関数を呼び出し、それに&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;という値を変数として渡しています。&lt;/p&gt;

&lt;p&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;global-display-line-numbers-mode&lt;/code&gt;はどのような関数でしょうか。&lt;a href=&quot;/saidai-deep-learning/linux/emacs-on-steroids-01-basics.html&quot;&gt;前回&lt;/a&gt;説明した通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;describe-function&lt;/code&gt;（あるいは&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f&lt;/code&gt;）を使うと、説明が出てきます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Toggle Display-Line-Numbers mode in all buffers.&lt;/p&gt;

  &lt;p&gt;With prefix &lt;em&gt;ARG&lt;/em&gt;, enable Global Display-Line-Numbers mode if &lt;em&gt;ARG&lt;/em&gt; is positive;&lt;/p&gt;

  &lt;p&gt;otherwise, disable it. If called from Lisp, enable the mode if &lt;em&gt;ARG&lt;/em&gt; is omitted or nil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;全てのバッファー（開いているファイル）で、&lt;code class=&quot;highlighter-rouge&quot;&gt;Display-Line-Numbers mode&lt;/code&gt;を有功にしてくれるそうです。さらに、もし引数を渡したら、それが正であれば有功にし、それ以外の場合を無効にしてくれるそうですね。なお、もし引数を渡していなければ、デフォルトで有功にしてくれると書いてあります。&lt;/p&gt;

&lt;h2 id=&quot;emacsの起動画面を無くしてみる&quot;&gt;Emacsの起動画面を無くしてみる&lt;/h2&gt;

&lt;p&gt;Emacsを起動するとき、このような画面が出てきますよね&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;stealthmate.github.io/saidai-deep-learning/assets/images//linux/emacs-on-steroids-02-init-el/emacs-startup-screen.png&quot; alt=&quot;Emacs Startup Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;綺麗には見えますが、あまり使いみちがないですね。この画面を表示せずに、即タイピング可能な状態で起動するようにしてみましょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;に以下を書いて、保存して、Emacsを再起動してみましょう：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inhibit-startup-message&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;画面が消えていますね！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;では、先程と同様に上の文を分析しましょう。今までの知識を使うと以下のことがいえます：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;この文は&lt;code class=&quot;highlighter-rouge&quot;&gt;setq&lt;/code&gt;関数を呼び出している&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setq&lt;/code&gt;関数に引数&lt;code class=&quot;highlighter-rouge&quot;&gt;inhibit-startup-message&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;という2つの引数を渡している。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;setq&lt;/code&gt;関数について調べてみましょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f setq RET&lt;/code&gt;を打つと：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(setq [&lt;em&gt;SYM&lt;/em&gt; &lt;em&gt;VAL&lt;/em&gt;]…)&lt;/p&gt;

  &lt;p&gt;Set each &lt;em&gt;SYM&lt;/em&gt; to the value of its &lt;em&gt;VAL&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;The symbols &lt;em&gt;SYM&lt;/em&gt; are variables; they are literal (not evaluated).&lt;/p&gt;

  &lt;p&gt;The values &lt;strong&gt;VAL&lt;/strong&gt; are expressions; they are evaluated.&lt;/p&gt;

  &lt;p&gt;Thus, (setq x (1+ y)) sets ‘x’ to the value of ‘(1+ y)’.&lt;/p&gt;

  &lt;p&gt;The second &lt;em&gt;VAL&lt;/em&gt; is not computed until after the first &lt;em&gt;SYM&lt;/em&gt; is set, and so on;&lt;/p&gt;

  &lt;p&gt;each &lt;em&gt;VAL&lt;/em&gt; can use the new value of variables set earlier in the ‘setq’.&lt;/p&gt;

  &lt;p&gt;The return value of the ‘setq’ form is the value of the last &lt;em&gt;VAL&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;少し複雑ですが、要するに&lt;code class=&quot;highlighter-rouge&quot;&gt;SYM&lt;/code&gt;の値を&lt;code class=&quot;highlighter-rouge&quot;&gt;VAL&lt;/code&gt;に設定するということを言っています。真ん中らへんに書いてる例を見ると、&lt;code class=&quot;highlighter-rouge&quot;&gt;(setq x (1+ y))&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;(1+ y)&lt;/code&gt;の値を代入すると書いてあります。&lt;/p&gt;

&lt;p&gt;つまり、変数への代入も関数呼び出しで行っています。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;変数に値を代入する方法はこれでわかったと思います。しかし、値を代入している変数がそもそもどのようなものか、どこで使われてどのような値を取らなければいけないかは分からないですよね。そういうときに、&lt;code class=&quot;highlighter-rouge&quot;&gt;describe-function&lt;/code&gt;とほとんど同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;describe-variable&lt;/code&gt;関数が役に立ってくれます！文字通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;describe-variable&lt;/code&gt;はある変数について教えてくれます。そしてショートカットは&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h v&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pro Tip: &lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f&lt;/code&gt;を&lt;strong&gt;h&lt;/strong&gt;elp &lt;strong&gt;f&lt;/strong&gt;unctionとして、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h k&lt;/code&gt;を&lt;strong&gt;h&lt;/strong&gt;elp &lt;strong&gt;k&lt;/strong&gt;eybindingとして、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h v&lt;/code&gt;を&lt;strong&gt;h&lt;/strong&gt;elp &lt;strong&gt;v&lt;/strong&gt;ariableとして考えれば覚えやすいです！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;では、&lt;code class=&quot;highlighter-rouge&quot;&gt;inhibit-startup-message&lt;/code&gt;について調べてみましょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h v inhibit-startup-message RET&lt;/code&gt;を打つと：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Documentation:&lt;/p&gt;

  &lt;p&gt;Non-nil inhibits the startup screen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡単ですね。&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;以外の値は起動画面を無効にするそうです。&lt;/p&gt;

&lt;h1 id=&quot;emacsをスッキリさせるための簡単なカスタマイズ&quot;&gt;Emacsをスッキリさせるための簡単なカスタマイズ&lt;/h1&gt;

&lt;p&gt;Emacsを起動すると、上に他のソフトと同じメニュー（ファイル、編集、設定など）がありますね。更にその下に良く使う昨日のボタンがあり、画面の右側にスクロールバーもありますね。Emacsにある程度慣れれば、これらはむしろ邪魔だと思うようになります。なぜかと言うと、ショートカットを使いこなせていれば、わざわざマウスを動かしてボタンを押す動作をする必要がないからです。&lt;/p&gt;

&lt;p&gt;皆さんに是非Emacsにそれぐらい慣れてほしいので、そのきっかけとして、上の3つのものを全部非表示にするためのカスタマイズ設定を載せておきます。それぞれ以下の通りです：&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;menu-bar-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; メニューを消す&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tool-bar-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; ボタンバーを消す&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scroll-bar-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; スクロールバーを消す&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Pro Tip: Elispでは&lt;code class=&quot;highlighter-rouge&quot;&gt;;;&lt;/code&gt;で行コメントが書けます！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上で説明した知識の範囲内なので、ぜひ各自でそれぞれの関数が何をしているか調べてみてください！&lt;/p&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;について説明し、簡単なElispの書き方を勉強しました。関数の呼び出しと変数の代入についてやり方を解説しまし、簡単なカスタマイズ設定をいくつか紹介しました。次回は、Emacsの様々な&lt;em&gt;mode&lt;/em&gt;について解説したいと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Emacs基礎知識</title><link href="stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-01-basics.html" rel="alternate" type="text/html" title="Emacs基礎知識" /><published>2019-11-14T02:32:38+09:00</published><updated>2019-11-14T02:32:38+09:00</updated><id>stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-01-basics</id><content type="html" xml:base="stealthmate.github.io/saidai-deep-learning/linux/emacs-on-steroids-01-basics.html">&lt;h1 id=&quot;事前知識準備&quot;&gt;事前知識・準備&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/saidai-deep-learning/linux/profile.html&quot;&gt;.profileと.bashrcの初期設定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ユーザー名が&lt;code class=&quot;highlighter-rouge&quot;&gt;michael&lt;/code&gt;だと仮定する&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;emacsの入れ方&quot;&gt;Emacsの入れ方&lt;/h1&gt;

&lt;p&gt;まずはインストールしましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install emacs25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;日本語入力の設定&quot;&gt;日本語入力の設定&lt;/h2&gt;

&lt;p&gt;Emacsで日本語入力を使うには、Emacs内でのIM (Input Method)か、システムのIMがあります。Emacs内のIMでもいいのですが、私の経験上、止まったり遅かったりするので、システムIMの方が使いやすかったので、ここでシステムIMを使うための設定を記述します。&lt;/p&gt;

&lt;p&gt;結論から言うと、Emacsを起動する際に&lt;code class=&quot;highlighter-rouge&quot;&gt;LC_CTYPE=ja_JP.utf-8 emacs&lt;/code&gt;で起動すればいいだけです。理由は&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Language-Environments.html&quot;&gt;ここ&lt;/a&gt;に書いているはずですが、私にも良く理解できていません。&lt;/p&gt;

&lt;p&gt;それで、上のコマンドを毎回打つのが面倒なので、&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/michael/bin/bemacs&lt;/code&gt;という実行ファイルを作って、&lt;code class=&quot;highlighter-rouge&quot;&gt;bemacs&lt;/code&gt;で起動できるようにします。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;emacs /home/michael/bin/bemacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;でまず普通のEmacsを起動して、ファイルの中に以下を書きます：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LC_CTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ja_JP.utf-8 emacs &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;簡単な説明をすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/code&gt;はこのファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;で実行しろという意味で、&lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt;は渡された引数をそのまま&lt;code class=&quot;highlighter-rouge&quot;&gt;emacs&lt;/code&gt;に渡します。ファイルを保存してから、実行権限を与えなければいけません。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/michael/bin
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x bemacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上で終わりです。今度からTerminalで&lt;code class=&quot;highlighter-rouge&quot;&gt;bemacs&lt;/code&gt;と打てば、上のファイルが実行され、&lt;code class=&quot;highlighter-rouge&quot;&gt;LC_CTYPE&lt;/code&gt;が設定されたEmacsが起動されます。&lt;/p&gt;

&lt;h1 id=&quot;emacsの中身&quot;&gt;Emacsの中身&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Emacs is an OS, disguised as a text editor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;掲示板などで良くこういうことが言われます。直訳すると、「Emacsはテキストエディタを装ったOSだ」という意味で、ようするにやろうと思えばどんなことでもEmacsでできるという意味です。&lt;/p&gt;

&lt;p&gt;Emacsのコアには&lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisp&lt;/a&gt;というプログラミング言語の方言 - &lt;a href=&quot;https://en.wikipedia.org/wiki/Emacs_Lisp&quot;&gt;Emacs Lisp&lt;/a&gt; (ELisp) - のインタプリタがあります。簡単に言うと、Emacsで行うほぼ全ての処理（移動、テキスト検索、ファイル管理など）はこのElispで書かれたスクリプトの実行結果です。したがって、Emacsの設定を変えるときも当然Elispを書かなければなりません。&lt;/p&gt;

&lt;p&gt;Elisp含めLispという言語はとても面白いので、ぜひ皆さん（私含め）に勉強してほしいですが、Emacsのカスタマイズでは極端に高度なことをしようとしない限り、完全に理解しなくてもいいです。たいてい、他の人が書いたコードを参考にしながら、自分でいろいろ書くだけで済みます。&lt;/p&gt;

&lt;h1 id=&quot;コマンドの実行方法&quot;&gt;コマンドの実行方法&lt;/h1&gt;

&lt;p&gt;Emacsで実際に意味がある作業をする時、必ずコマンドを使います。皆さんは既にいくつかのコマンドを知っているはずです。&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+X Ctrl+F&lt;/code&gt;を打つと、&lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt;というコマンドが実行され、編集したいファイルを探すことができます。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+X Ctrl+C&lt;/code&gt;を打つと、&lt;code class=&quot;highlighter-rouge&quot;&gt;save-buffers-kill-terminal&lt;/code&gt;コマンドが実行され、Emacsが終了します。&lt;/p&gt;

&lt;p&gt;コマンドは2つの方法で実行できます。一つは先程言ったように、ショートカットを使って実行する方法です。もう一つは、コマンドの名前を直接指定して実行する方法です。コマンドの名前をしていする時は（皮肉なことに）&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+X&lt;/code&gt;を打つと、Emacs画面の一番したの&lt;strong&gt;prompt&lt;/strong&gt;で、コマンドの名前を入力できます。なお、途中まで入力し、&lt;code class=&quot;highlighter-rouge&quot;&gt;TAB&lt;/code&gt;キーを押すと、自動補完が使えます。&lt;/p&gt;

&lt;p&gt;試しに&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+X&lt;/code&gt;を打って、&lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt;を実行してみましょう。&lt;/p&gt;

&lt;h1 id=&quot;ショートカットの記述方法&quot;&gt;ショートカットの記述方法&lt;/h1&gt;

&lt;p&gt;先程は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+X Ctrl+F&lt;/code&gt;のように、ショートカットを記述しましたが、実はEmacsは独自の書式を採用しています。ここではその書式について簡単に説明します。ただし、Macキーボードは仕様が違うので、下の説明は当てはまりません。&lt;/p&gt;

&lt;p&gt;まず、&lt;strong&gt;modifier keys&lt;/strong&gt;（修飾キー）について説明します。ほとんどのショートカットは修飾キーを用いて実行します。キーボードには4つの修飾キーがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; - 最下行の一番左（或いは左から2番め）と左矢印の左側にあるのボタンです。&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;と書いてあります。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt; - Metaキーは2通りあります。一つは&lt;code class=&quot;highlighter-rouge&quot;&gt;ESC&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Escape&lt;/code&gt;)キーです。もう一つはキーボード最下行のスペースの左右にあるボタンです。&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt Gr&lt;/code&gt;と書いてあります。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Super&lt;/code&gt; - これは所謂Windowsキーです。Windowsのロゴが書いてあるキーのことです。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt; -&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;または太い矢印の輪郭が書いてあるキーです。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;さて、修飾キーを定義しましたので、今度は書式自体について説明します。&lt;/p&gt;

&lt;p&gt;まず、修飾キーを使ったショートカットは、修飾キー記号の後ろに&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;を書き、該当キーを書きます。&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;キーと&lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt;キーはそれぞれの頭文字を使って記述します。例えば&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x C-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これは上に書いた&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+X Ctrl+F&lt;/code&gt;という、&lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt;コマンドのショートカットです。また&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;M-x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これは上に書いた&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+X&lt;/code&gt;という、コマンド名を指定して実行するときに使うショートカットです。また、修飾キーを組み合わせたい時、同じく&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;でつなげ、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-M-S-s&lt;/code&gt;の順で書きます。ここで、&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;キー、&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Super&lt;/code&gt;キーを意味します。例えば、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-M-s k&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+Super+k&lt;/code&gt;を意味します。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最後に、&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;キーを使うショートカットについての注意点です。今後ショートカットを定義するときに上記の書式を使いますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;を使う文字の場合は一般的に&lt;code class=&quot;highlighter-rouge&quot;&gt;C-S-k&lt;/code&gt;のようには書かないで、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-K&lt;/code&gt;と書きます。これはなぜかと言うと、&lt;code class=&quot;highlighter-rouge&quot;&gt;S-k&lt;/code&gt;を打つと&lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;という文字になるからです。また、記号に関しても同じで、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-S-1&lt;/code&gt;ではなく、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-!&lt;/code&gt;と書きます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;だがしかし&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ここでキーボードの&lt;a href=&quot;http://www.nagasaki-gaigo.ac.jp/toguchi/pc/multilingual/keyboard_us_jis.htm&quot;&gt;US配列とJIS配列&lt;/a&gt;が関係して来ます。Emacsはアメリカ人がアメリカ人向けに作ったものなので、当然US配列を使っています。そこで、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-@&lt;/code&gt;というショートカットを考えてみましょう。JIS配列（日本で普及している配列）では特に面白いものではないですね。しかし、US配列で見るとこれは&lt;code class=&quot;highlighter-rouge&quot;&gt;C-S-2&lt;/code&gt;に等しいです。&lt;/p&gt;

&lt;p&gt;この違いによって、US配列では論理性があるショートカットでも、JIS配列では意味不明なことになっていることがありえるので、注意する必要があります。&lt;/p&gt;

&lt;p&gt;個人的な意見ですが、JISキーボードはキーが無駄に多く、スペースが無駄に狭かったり、記号の配置が理不尽なところがあるので、US配列をおすすめします。US配列は、設定すればJISキーボードでも使えますが、当然キーボードに書いている文字が違ってくるので、慣れるまでは大変かもしれません。&lt;/p&gt;

&lt;h2 id=&quot;特別なキーの書き方&quot;&gt;特別なキーの書き方&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;キー名&lt;/th&gt;
      &lt;th&gt;書き方&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Enter&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RET&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Escape&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ESC&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tab&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TAB&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Left Arrow&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Right Arrow&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Up Arrow&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;up&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Down Arrow&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;down&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Backspace&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backspace&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;コマンドについて調べたい時&quot;&gt;コマンドについて調べたい時&lt;/h1&gt;

&lt;h2 id=&quot;あるコマンドの意味やショートカットを調べたい時&quot;&gt;あるコマンドの意味やショートカットを調べたい時&lt;/h2&gt;

&lt;p&gt;あるコマンドが何をするか、どのショートカットで実行できるかを調べたいとき、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f&lt;/code&gt;を打ち、promptでコマンド名を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;RET&lt;/code&gt;を打つと、helpが表示されます。helpにはコマンドによっていろいろ書かれていますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;It is bound to&lt;/code&gt;と書いてある文に注目すると、どのショートカットで実行できるかが書いています。例えば、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f find-file RET&lt;/code&gt;を打つと、&lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt;の説明が表示されます。&lt;/p&gt;

&lt;h2 id=&quot;あるショートカットに紐付いているコマンドを調べたい時&quot;&gt;あるショートカットに紐付いているコマンドを調べたい時&lt;/h2&gt;

&lt;p&gt;このショートカットを打つとどうなるんだろう、ということを調べたければ、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h k&lt;/code&gt;を打ち、その次にショートカットを打つと、もしそれにコマンドが紐付いていればhelpが表示されます。例えば、&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h k C-x C-f&lt;/code&gt;を打つと、&lt;code class=&quot;highlighter-rouge&quot;&gt;find-file&lt;/code&gt;の説明が表示されます。&lt;/p&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;今回はEmacsの基本的なところを把握し、基礎を勉強しました。次回はEmacsの設定の変え方や簡単なカスタマイズについて書きたいと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html">事前知識・準備</summary></entry></feed>